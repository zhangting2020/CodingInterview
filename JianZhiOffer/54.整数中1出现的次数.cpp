/********************************************************************************
题目描述
1~13中包含1的数字有1、10、11、12、13因此共出现6次。求出任意非负整数区间中1出现的次数。
解题思路：
对于一个数123，可以分为个位上出现1的数；十位上出现1的次数；百位出现1的次数
1.对于个位而言，低位为0，高位为12。
2.个位的数为3时，个位出现1的个数 = **1 ~ 121 共（12 + 1）* 1 = 13个 （**表示前面的数从00，01,...12）
3.十位为2，十位出现1的个数：10~19,110~119，即（1 + 1）*10 = 20
4.百位为1，百位出现1的个数：100~123, 即23 + 1 = 24个

规律：
数abcde中1出现的次数，分别与每一位上的数字有关，从最低位开始往高位，每一次提取当前位，
当前位的低位，当前位的高位，例如对于百位c,低位de,高位ab。
1.若c=0(12031),c上出现1的个数只与高位有关，高位从1~12，故当前为为1的次数：12 * 100 = 1200
2.若c=1（12113），c上出现1的个数与高位和低位有关： 12（高位） * 100 + 13（低位） + 1 = 1214
3.若c>1(12213),c上出现1的次数与高位有关：100~199,  1100~1199,2100~2199，...，12100~12199
 （1 + 高位12）*100=1300
********************************************************************************/
class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
        int iCount = 0;
        int iFactor = 1;
        int iLowerNum = 0;
        int iCurrNum = 0;
        int iHigherNum = 0;
        while( (n / iFactor) != 0)
        {
            iLowerNum = n - (n / iFactor) * iFactor; //计算低位的数字
            iCurrNum = (n / iFactor) % 10;  //当前位
            iHigherNum = n / (iFactor * 10); //高位
            
            switch(iCurrNum)
            {
                case 0 :
                    iCount += iHigherNum * iFactor;   //当前位为0,当前位上1出现的次数只和高位有关
                    break;
                case 1:
                    iCount += iHigherNum * iFactor + iLowerNum + 1; //当前位为1，当前位1出现的次数和高位及低位有关
                    break;
                default:
                    iCount += (iHigherNum + 1) * iFactor;  //当前位大于1
                    break;
            }
            iFactor *= 10;
        }
        return iCount;
    }
};